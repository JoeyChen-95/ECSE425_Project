library IEEE;
use IEEE.std_logic_1164.all;
use work.memory_arbiter_lib.all;
use ieee.numeric_std.all;

-- register ports: listed below 
-- 2 address ports and 2 outputs port
-- 3 write ports: write in; write enable and write address
-- also clock and reset signals.
-- then outputs: destination; ALU; memory; register; storeen; loaden.

entity MEMORY is
  port(
  --input, connect outputs values
  -- oscillates between a high and a low state
  clock: in std_logic;
  acce_addressaddin: in std_logic_vector(reg_adrsize-1 downto 0); 
  -- connect destionation out
  inaddress: in std_logic_vector(31 downto 0); 
  -- connect ALU out
  indata: in std_logic_vector (31 downto 0);
  -- connect memory out
  accein_regis: in std_logic; 
  -- connect register out 
  accewrite_memory: in std_logic;
  -- connect storeen out
  acceload_memory: in std_logic;
  resetn: in std_logic;
  -- reset n signal
  byte: in std_logic;
  -- eight bits
  
  --output 
  outdata: out std_logic_vector(31 downto 0):= (others=> 'Z');
  datain_forward: in std_logic_vector (31 downto 0);
  selectresult_datain: in std_logic;
  acceout_regis: out std_logic;
  -- connect writeback stage
  acceadd_outregis: out std_logic_vector (reg_adrsize-1 downto 0)
  -- destionation out
  );
end entity;

architecture behavior of MEMORY is

signal tempin_addr:std_logic_vector (31 downto 0);
signal selectdata:std_logic_vector (31 downto 0);
signal datainfo:std_logic_vector (31 downto 0);

begin
  memorydata: entity work.Data_Memory --? what is this; and can below value change?
  PORT MAP (
  byte=>byte,
  clock=>clock,
  n_rst=>resetn,
  port_out=>datainfo,
  write_enable=>accewrite_memory,
  write_in=>selectdata,
  write_adr=>temp_inaddr(31 downto 0),
  port_adr=>temp_inaddr(31 downto 0)
  );

process(clock,resetn)
  
begin
  if(rising_edge(clk)) then --?
  acceout_regis<=accein_regis;  
  acceadd_outregister<=acce_addressaddin;
    if(acceload_memory='1') then
    outdata<=datainfo;
    else
    outdata<=inaddress;
    end if;
  end if;
end process; 

with selectresult_datain select selectdata<=
datain_forward when '1',
indata when others;

tempin_addr<=inaddress when (acceload_memory='1') 
else (OTHERS => '0');
end behavior;
